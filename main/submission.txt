//=====================
//************************************************************
// FILE: main.cpp
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Entry point of the Ferry Reservation Software System.
// Initializes the system, runs the main UI loop, and shuts down cleanly.
//************************************************************

#include <iostream>
#include "ui.h"

int main() {
    // // Initialize system modules
    // if (!UI::initialize()) {
    //     std::cerr << "Initialization failed. Exiting program.\n";
    //     return 1;
    // }

    // // Launch main menu loop
    // UI::mainMenu();

    // // Shutdown and cleanup
    // UI::shutdown();

    return 0;
}



//=====================
//************************************************************
//************************************************************
// FILE: Reservation.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 25/07/09
//************************************************************
// PURPOSE:
// This module declares the interface for reservation-related logic,
// including adding, editing, checking-in, and fare calculation.
// It is part of the scenario control layer.
//
// This header provides only interface-level types and function signatures.
// Internal storage layout and algorithms are intentionally not exposed.
//************************************************************
// USAGE:
// - Call initialize() before using any functions in this module.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - Danny Choi
//          - Initial draft for interface specification.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter

#ifndef RESERVATION_H
#define RESERVATION_H

#include <string>

const int LICENSE_PLATE_MAX = 10; // Capacity of license plate (capacity is 10)
const int SAILING_ID_MAX = 9;    // Capacity of Sailing ID  (capacity is 9)

//--------------------------------------------------
// Minimal type used for interface clarity only.
// This struct represents a reservation as seen at the interface level.
// Do not assume this matches the internal data layout in Assignment 4.
struct ReservationData {
    std::string licensePlate;   // Vehicle license plate (capacity is 10 characters)
    std::string sailingID;      // ID used to define which sailing. (capacity is 9 characters)
    bool onboard;               // True if already checked in, false otherwise.
};

//--------------------------------------------------
// Initializes reservation subsystem.
// Must be called before any other function in this module.
void initialize();

//--------------------------------------------------
// Shuts down reservation subsystem and releases internal resources.
void shutdown();

//--------------------------------------------------
// Adds a reservation for a vehicle on a sailing. Returns true if successful, false otherwise.
bool addReservation(
    const std::string &sailingID,   // in: sailing to reserve on
    const std::string &licensePlate,// in: vehicle's license plate
    const std::string &phone,       // in: contact phone number 
    bool isSpecial,                 // in: true if special vehicle
    float height,                   // in: height if special (m), 0 otherwise
    float length                    // in: length if special (m), 0 otherwise
);

//--------------------------------------------------
// Changes a reservation to checked-in status if it is not already checked-in. Returns true if successful, false otherwise.
bool checkedIn(
    const std::string &sailingID,   // in: sailing ID
    const std::string &licensePlate    // in: vehicle ID
);

//--------------------------------------------------
// Updates an existing reservation. Returns true if successful, false otherwise.
bool editReservation(
    const std::string &sailingID,   // in: sailing ID
    const std::string &phone       // in: phone number to locate reservation
);

//--------------------------------------------------
// Starts the checked-in process by taking sailing ID, license plate. 
void checkIn(
    const std::string &sailingID,   // in: sailing ID
    const std::string &licensePlate    // in: vehicle ID
);

//--------------------------------------------------
// Calculates fare based on special status and vehicle dimensions.
// Fare is returned in dollars to 2 decimal places.
float calculateFare(
    bool isSpecial,         // in: true if special vehicle
    float length,           // in: vehicle length in meters
    float height            // in: vehicle height in meter
);


//--------------------------------------------------
// Deletes all reservations associated with a sailing. Returns number of reservations deleted, 0 if none were deleted.
int deleteAllOnSailing(
    const std::string &sailingID    // in: sailing ID
);

//--------------------------------------------------
// Moves reservations from one sailing to another. Returns number of reservations moved, 0 if none were moved.
int moveReservations(
    const std::string &fromSailingID, // in: source sailing ID
    const std::string &toSailingID    // in: destination sailing ID
);

#endif // RESERVATION_H


//=====================
//************************************************************
//************************************************************
// FILE: ReservationFileIO.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 25/07/09
//************************************************************
// PURPOSE:
// This module defines the interface for persistent storage and retrieval
// of reservation records using binary random-access file I/O.
//
// The actual storage format and internal data layout are abstracted.
// The interface focuses on what functions client modules can call to read,
// write, search, or delete reservation records.
//************************************************************
// USAGE:
// - Call open() before using read/write functions.
// - Call close() during shutdown.
// - This module handles I/O only. Reservation logic lives in Reservation.cpp.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - Danny Choi
//          - Initial interface for I/O abstraction.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter

#ifndef RESERVATION_FILE_IO_H
#define RESERVATION_FILE_IO_H

#include <string>
#include <vector> 
#include <fstream> // used for opening reservation file for reading/writing

//--------------------------------------------------
// Interface type representing a reservation record.
// This struct is used only for passing data across modules.
// It does not imply internal storage format.
struct ReservationRecord {
    std::string licensePlate;    // Vehicle license plate (capacity is 10 characters)
    std::string sailingID;      // ID used to define which sailing. (capacity is 9 characters)
    bool onboard;              // True if already checked in, false otherwise.
};

//--------------------------------------------------
// Opens the reservation data file for reading/writing.
// Returns true on success, false on failure.
bool open(
    const std::string &filename   // in: path to binary file
);

//--------------------------------------------------
// Closes the currently open reservation file.
void close();

//--------------------------------------------------
// Saves a reservation created into a ReservationRecord object. Returns true if successful, false otherwise.
bool saveReservation(
    const ReservationRecord &record   // in: reservation data to store
);

//--------------------------------------------------
// Loads a reservation record by vehicle and sailing ID. Returns true if successful, false otherwise.
bool getReservation(
    const std::string &licensePlate,     // in: vehicle ID
    const std::string &sailingID,        // in: sailing ID
    ReservationRecord &record           // out: record to ReservationRecord object
);

//--------------------------------------------------
// Checks if a reservation exists in the file. Returns true if successful, false otherwise.
bool exists(
    const std::string &licensePlate,   // in: vehicle ID
    const std::string &sailingID      // in: sailing ID
);

//--------------------------------------------------
// Deletes a reservation from the file if it exists. Returns true if successful, false otherwise.
bool deleteReservation(
    const std::string &licensePlate,     // in: vehicle ID
    const std::string &sailingID      // in: sailing ID
);

//--------------------------------------------------
// Retrieves all reservations for a sailing.
std::vector<ReservationRecord> getAllOnSailing(
    const std::string &sailingID      // in: sailing ID
);

//--------------------------------------------------
// Retrieves all reservations matching a vehicle.
std::vector<ReservationRecord> getAllWithVehicle(
    const std::string &licensePlate      // in: vehicle ID
);

#endif // RESERVATION_FILE_IO_H


//=====================
//************************************************************
// FILE: Sailing.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Declares the interface for managing sailings, including adding, editing,
// updating lane usage, and displaying reports. Supports interaction with
// persistent sailing records in the system.
//************************************************************
// USAGE:
// - Call initialize() before using any functions in this module.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - Nathan Miller 
//          - Initial draft for interface specification.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter
//************************************************************

#ifndef SAILING_H
#define SAILING_H

#include <string>

//--------------------------------------------------
// Represents a ferry sailing, with vessel info and lane usage tracking.
class Sailing
{
private:
    std::string sailingID; // sailing ID in format: terminal-date-hour
    std::string vesselID;  // vessel name
    float lcll;            // total low ceiling lane length (regular vehicles)
    float hcll;            // total high ceiling lane length (special vehicles)
    float lrl;             // remaining regular lane length
    float hrl;             // remaining special lane length

public:
    //--------------------------------------------------
    // Adds a new sailing by prompting user input. Aborts if duplicate.
    // Returns false if sailing already exists.
    bool addSailing();

    //--------------------------------------------------
    // Opens a sailing record to allow editing or deletion.
    void editSailing();

    //--------------------------------------------------
    // Initializes the Sailing module (e.g., opens file I/O).
    static void initialize();

    //--------------------------------------------------
    // Returns remaining high ceiling lane length.
    // out: remaining special vehicle space
    int hrlRemaining() const;

    //--------------------------------------------------
    // Returns remaining low ceiling lane length.
    // out: remaining regular vehicle space
    int lrlRemaining() const;

    //--------------------------------------------------
    // Finalizes the Sailing module (e.g., closes file I/O).
    static void shutdown();

    //--------------------------------------------------
    // Reduces available high ceiling lane length.
    // in: f – value to subtract from hrl
    void hrlUpdate(float f);

    //--------------------------------------------------
    // Reduces available low ceiling lane length.
    // in: f – value to subtract from lrl
    void lrlUpdate(float f);

    //--------------------------------------------------
    // Displays a report of all sailing data stored.
    static void displayReport();
};

#endif // SAILING_H



//=====================
//************************************************************
// FILE: SailingFileIO.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Declares the interface for file I/O operations on Sailing records,
// including opening, closing, querying, and modifying the persistent data.
//************************************************************
// USAGE:
// - Call open() before any other operations.
// - Use exists(), getSailing(), getNextFive() for queries.
// - Use saveSailing(), deleteSailing() for modifications.
// - Call close() when done.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - James Nguyen
//          - Initial draft for interface specification.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter
//************************************************************

#ifndef SAILING_FILE_IO_H
#define SAILING_FILE_IO_H

#include <fstream>
#include "sailing.h"
#include <string>

//--------------------------------------------------
// Static helper for navigating persistent Sailing records.
class FileIOforSailing
{
private:
    std::fstream data;  // fstream object for sailing data file

public:
    //--------------------------------------------------
    // Opens the sailing data file.
    // Returns false if unable to open.
    bool open();

    //--------------------------------------------------
    // Closes the sailing data file.
    // Returns false if unable to close.
    bool close();

    //--------------------------------------------------
    // Resets file read position to beginning.
    void reset();

    //--------------------------------------------------
    // Checks if a sailing with the given ID exists.
    // in:  sid – sailing ID to query
    // Returns true if found.
    bool exists(const std::string &sid);

    //--------------------------------------------------
    // Retrieves a sailing by ID. Use exists() first.
    // in:  sid – sailing ID to retrieve
    // Returns a Sailing object populated from file.
    Sailing getSailing(const std::string &sid);

    //--------------------------------------------------
    // Retrieves up to the next five sailings in file order.
    // Returns pointer to an array of up to five Sailing objects.
    Sailing* getNextFive();

    //--------------------------------------------------
    // Saves a new sailing record to file.
    // in:  s – Sailing object to persist
    // Returns true if successful.
    bool saveSailing(const Sailing &s);

    //--------------------------------------------------
    // Deletes a sailing record by ID.
    // in:  sid – sailing ID to remove
    // Returns true if successful.
    bool deleteSailing(const std::string &sid);
};

#endif // SAILING_FILE_IO_H



//=====================
//************************************************************
// FILE: UI.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Declares the interface for the console-based user interface,
// including initialization, main menu loop, and shutdown.
// Connects Sailing, Vehicle, and Reservation modules.
//************************************************************
// USAGE:
// - Call UI::initialize() at program start (e.g., from main.cpp).
// - Call UI::mainMenu() to display options and handle user input.
// - Call UI::shutdown() before program exit.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - James Nguyen
//          - Initial draft for interface specification.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter
//************************************************************

#ifndef UI_H
#define UI_H

#include "sailing.h"
#include "sailingFileIO.h"
#include "vehicle.h"
#include "vehicleFileIO.h"
#include "reservation.h"
#include "reservationFileIO.h"

//--------------------------------------------------
// Namespace UI: console-based user interface controller
//--------------------------------------------------
namespace UI {

    //--------------------------------------------------
    // initialize
    // Sets up modules and loads initial data.
    // Returns true if successful.
    // out: none
    //--------------------------------------------------
    bool initialize();

    //--------------------------------------------------
    // mainMenu
    // Displays the main menu, processes user commands until exit selected.
    // in: none
    // out: none
    //--------------------------------------------------
    void mainMenu();

    //--------------------------------------------------
    // shutdown
    // Saves any pending changes, cleans up resources.
    // out: none
    //--------------------------------------------------
    void shutdown();

} // namespace UI

#endif // UI_H



//=====================
//************************************************************
// FILE: Vehicle.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Declares the interface for Vehicle objects, including creation,
// editing, and classification (special vs. regular).
//************************************************************
// USAGE:
// - Call initialize() to set up a Vehicle instance.
// - Use addVehicle()/editVehicle() for persistence operations.
// - Query isSpecial(), getLength(), or getHeight() as needed.
//************************************************************
// REVISION HISTORY:
// Rev. 1 - 2025/07/09 - James Nguyen
//          - Initial draft for interface specification.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter
//************************************************************

#ifndef VEHICLE_H
#define VEHICLE_H

#include <string>
using namespace std;

// Fare rates
static constexpr float BASE_FARE               = 14.0f;  // flat fee per regular vehicle
static constexpr float LOW_LONG_RATE_PER_METER =  2.0f;  // $/m for low-height but long vehicles
static constexpr float OVERHEIGHT_RATE_PER_METER = 3.0f; // $/m for over‑height vehicles

//--------------------------------------------------
// Represents a vehicle with license, contact, dimensions,
// and special‐vehicle classification.
// Special vehicles: height > 2.0m OR length > 7.0m
class Vehicle {
private:
    char licence[11];  // 1–10 chars + null terminator
    char phone[15];    // 8–14 chars + null terminator
    float length;      // in meters
    float height;      // in meters
    bool special;      // true if height > 2.0m OR length > 7.0m

public:
    //--------------------------------------------------
    // Initializes this Vehicle with provided attributes.
    // in: newLicence – null‐terminated license string
    // in: newPhone   – null‐terminated phone string
    // in: newLength  – length in meters
    // in: newHeight  – height in meters
    void initialize(
        const char* newLicence,
        const char* newPhone,
        float newLength,
        float newHeight
    );

    //--------------------------------------------------
    // Cleans up resources (if any).
    void shutdown();

    //--------------------------------------------------
    // Adds a Vehicle record with the given attributes.
    // in: newLicence – null‐terminated license string
    // in: newPhone   – null‐terminated phone string
    // in: newLength  – length in meters
    // in: newHeight  – height in meters
    void addVehicle(
        const char* newLicence,
        const char* newPhone,
        float newLength,
        float newHeight
    );

    //--------------------------------------------------
    // Edits this Vehicle's information.
    // in: newLicence – new license string
    // in: newPhone   – new phone string
    // in: newLength  – new length in meters
    // in: newHeight  – new height in meters
    void editVehicle(
        const char* newLicence,
        const char* newPhone,
        float newLength,
        float newHeight
    );

    //--------------------------------------------------
    // Determines if this Vehicle is classified as special.
    // Returns true if height > 2.0m OR length > 7.0m.
    bool isSpecial() const;

    //--------------------------------------------------
    // Returns this Vehicle's length (meters).
    float getLength() const;

    //--------------------------------------------------
    // Returns this Vehicle's height (meters).
    float getHeight() const;
};


#endif // VEHICLE_H



//=====================
//************************************************************
// FILE: VehicleFileIO.h
//************************************************************
// PROJECT: CMPT 276 – Ferry Reservation Software System (Assignment #3)
// TEAM: Group 19
// DATE: 2025/07/09
//************************************************************
// PURPOSE:
// Declares the interface for file I/O operations on Vehicle records,
// including opening, closing, querying, retrieving, and saving data.
//************************************************************
// USAGE:
// - Instantiate FileIOforVehicle and call open() before any other operations.
// - Use exists(), getVehicle(), or getAllVehicles() for queries.
// - Use saveVehicle() to persist a Vehicle.
// - Call close() when done.
//************************************************************
// in: Represents input parameter
// out: Represents output parameter
//************************************************************

#ifndef VEHICLE_FILE_IO_H
#define VEHICLE_FILE_IO_H

#include <fstream>
#include <string>
#include <vector>
#include "vehicle.h"

//--------------------------------------------------
// Helper for navigating persistent Vehicle records.
class FileIOforVehicle
{
private:
    std::fstream data;  // file stream for vehicle data

public:
    //--------------------------------------------------
    // Opens the vehicle data file.
    // Returns false if unable to open.
    bool open();

    //--------------------------------------------------
    // Closes the vehicle data file.
    // Returns false if unable to close.
    bool close();

    //--------------------------------------------------
    // Checks if a vehicle with the given license exists.
    // in:  licence – license string to query
    // Returns true if found.
    bool exists(const std::string &licence);

    //--------------------------------------------------
    // Retrieves all vehicles from the data file.
    // out: vector of Vehicle objects (empty if none).
    std::vector<Vehicle> getAllVehicles();

    //--------------------------------------------------
    // Retrieves a single Vehicle by license.
    // in:  licence – license string to retrieve
    // Returns a Vehicle object populated from file.
    Vehicle getVehicle(const std::string &licence);

    //--------------------------------------------------
    // Saves a Vehicle record to the data file.
    // in:  v – Vehicle object to persist
    // Returns true if successful.
    bool saveVehicle(const Vehicle &v);
};

#endif // VEHICLE_FILE_IO_H



